# -*- coding: utf-8 -*-
"""jm-ARIMA-passenger.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BtypPeaSRn92kcqSJnE8Gev0uAEXetkF
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

import statsmodels.api as sm
from statsmodels.graphics.tsaplots import plot_acf
from statsmodels.graphics.tsaplots import plot_pacf
from statsmodels.tsa.stattools import adfuller
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.tsa.ar_model import AR
from statsmodels.tsa.arima_model import ARMA, ARIMA
from statsmodels.tsa.statespace.sarimax import SARIMAX

from math import sqrt


import seaborn as sns

from random import random

from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, median_absolute_error, mean_squared_log_error

df = pd.read_csv('passenger.csv',header=None)

df.columns = ['year','passengers']

df.head()

df.describe()

print('Time period start: {}\nTime period end: {}'.format(df.year.min(),df.year.max()))

df.shape

df['year'] = pd.to_datetime(df['year'], format='%Y-%m')

y = df.set_index('year')

y.index

y.isnull().sum()

y.plot(figsize=(15, 6))
plt.show()

from statsmodels.graphics.tsaplots import plot_acf
from statsmodels.graphics.tsaplots import plot_pacf

plt.figure()  # ACF PACF PLOTS
plt.subplot(211)
plot_acf(y.passengers, ax=plt.gca(), lags = 30)    # y data (non stationary)
plt.subplot(212)
plot_pacf(y.passengers, ax=plt.gca(), lags = 30)
plt.show()

"""GO FOR AN ADF TEST"""

ts = y.passengers - y.passengers.shift(1)    #differencing METHOD GIVES YOU A STATIONARY SERIES
                                            #FOR ARIMA DIFFERENCING IS MUST
ts.dropna(inplace=True)

plt.figure()                                #AUTOCORRELATION PLOTS   (p,q)
plt.subplot(211)
plot_acf(ts, ax=plt.gca(),lags=30)
plt.subplot(212)
plot_pacf(ts, ax=plt.gca(),lags=30)
plt.show()

"""perform ADF TO CONFIRM STATIONARY ON ts"""

#divide into train and validation set
train = y[:int(0.75*(len(y)))]
valid = y[int(0.75*(len(y))):]

#plotting the data
train['passengers'].plot()
valid['passengers'].plot()

import statsmodels.api as sm
model = sm.tsa.arima.ARIMA(train, order=(2,1,2))
results=model.fit()
results.summary()

start_index = valid.index.min()
end_index = valid.index.max()

#Predictions
predictions = results.predict(start=start_index, end=end_index)

def evaluate_forecast(y,pred):
    results = pd.DataFrame({'r2_score':r2_score(y, pred)}, index=[0])

    results['mean_absolute_error'] = mean_absolute_error(y, pred)
    results['median_absolute_error'] = median_absolute_error(y, pred)
    results['mse'] = mean_squared_error(y, pred)
    results['msle'] = mean_squared_log_error(y, pred)
    results['rmse'] = np.sqrt(results['mse'])
    return results

evaluate_forecast(y[start_index:end_index], predictions)    #actual          (y)    vs prediction(test)

from statsmodels.graphics.tsaplots import plot_predict


#plot_predict(results,1,264)
x=results.forecast(steps=120)  #10 *12=120
x